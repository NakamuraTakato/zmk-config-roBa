#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    tapping-term-ms = <100>;
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
        };
    };

    &zip_temp_layer MOUSE

    500;

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W       &kp E      &kp R                 &kp T                                                   &kp Y          &kp U  &lt 5 I   &kp O     &kp P
&kp A             &kp S       &kp D      &kp F                 &kp G        &kp LS(LG(S))               &kp MINUS      &kp H          &kp J  &kp K     &kp L     &kp MINUS
&mt LEFT_SHIFT Z  &kp X       &kp C      &kp V                 &kp B        &kp COLON                   &kp SEMICOLON  &kp N          &kp M  &mkp MB1  &mkp MB2  &mt RIGHT_SHIFT ENTER
&mt LCTRL TAB     &kp PERIOD  &kp COMMA  &lt_to_layer_0 1 TAB  &lt 2 SPACE  &mt LEFT_COMMAND LANG1      &lt 3 LANG2    &kp BACKSPACE                             &lt 6 ESC
            >;
        };

        number {
            bindings = <
&kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS        &kp SLASH                       &kp N7        &kp N8        &kp N9        &trans  &kp KP_NUMLOCK
&kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PLUS         &kp ASTRK   &trans      &trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans  &kp CAPSLOCK
&kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_0  &kp PERIOD  &trans      &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0  &trans
&trans           &trans           &trans           &trans           &trans      &trans      &trans  &trans                                            &trans
            >;
        };

        NUM {
            bindings = <
&kp PERCENT  &kp DOLLAR  &kp AMPERSAND  &kp CARET        &kp SLASH                         &kp BACKSLASH   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN     &kp GREATER_THAN
&kp AT_SIGN  &kp HASH    &kp ASTERISK   &kp PLUS         &kp EQUAL     &trans      &trans  &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON     &kp COLON
&kp GRAVE    &kp TILDE   &trans         &kp EXCLAMATION  &kp QUESTION  &trans      &trans  &kp PIPE        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES
&trans       &trans      &trans         &trans           &trans        &trans      &trans  &trans                                                                         &trans
            >;
        };

        ARROW {
            bindings = <
&kp LG(Q)  &kp LG(W)  &trans     &trans     &kp LG(T)                      &kp LC(LS(LG(NUMBER_4)))  &trans                  &trans                  &trans                   &kp C_VOL_UP
&kp LG(A)  &kp LG(S)  &trans     &trans     &trans     &trans      &trans  &trans                    &kp LG(LEFT_BRACKET)    &kp LG(LA(UP_ARROW))    &kp LG(RIGHT_BRACKET)    &kp C_VOLUME_DOWN
&trans     &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(B)  &trans      &trans  &trans                    &kp LG(LA(LEFT_ARROW))  &kp LG(LA(DOWN_ARROW))  &kp LG(LA(RIGHT_ARROW))  &kp LA(LG(L))
&trans     &trans     &trans     &trans     &trans     &trans      &trans  &trans                                                                                             &kp LC(UP_ARROW)
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans         &trans  &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans         &trans  &mkp MB3  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans         &mo 5   &mkp MB1  &mkp MB2  &kp ENTER
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp BACKSPACE                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp F7  &kp F8  &kp F9  &trans   &trans                             &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3     &bt BT_SEL 4
&kp F4  &kp F5  &kp F6  &trans   &trans  &trans      &trans         &trans        &kp HOME        &kp UP_ARROW    &kp END          &bt BT_CLR_ALL
&trans  &kp F2  &kp F3  &kp F10  &trans  &trans      &bootloader    &trans        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans  &trans   &trans  &trans      &kp RIGHT_ALT  &kp DELETE                                                     &trans
            >;
        };
    };
};
